LDX is an extension to python pandas. Instead of explicitly passing the parameters
to the pandas built-in methods (e.g groupby), it allows you use continuity variables (placeholders), which are determined during runtime.
The extension is especially useful for specifying the order of notebook's query operations and their type and parameters.
The continuity variables stores its value in order to reuse the same value in several places.
LDX currently supports only the following operations: filter, groupby, agg.

here are some basic examples how to convert tasks to LDX:

task: apply twice the same aggregation and same groupby
LDX:
       agg = df.groupby(<COL>).agg(<AGG>)
       same_agg = df.groupby(<COL>).agg(<AGG>)

task: apply two different aggregations, both grouped by the same column
LDX:
        agg1 = df.groupby(<COL>).agg(<AGG1>)
        agg2 = df.groupby(<COL>).agg(<AGG2>)

task: group by separately by two different columns, both aggregated with the same aggregation
LDX:
        groupby1 = df.groupby(<COL1>).agg(<AGG>)
        groupby2 = df.groupby(<COL2>).agg(<AGG>)

task: apply two completely different aggregations
LDX:
        agg1 = df.groupby(<COL1>).agg(<AGG1>)
        agg2 = df.groupby(<COL2>).agg(<AGG2>)

task: filter attribute ATT to some value
LDX:
      some_origin_airport = df[df['ATT'] == <VALUE>]

task: make sure at some point to filter attribute ATT to some value, there might be other operations before that.
LDX:
      do_some_operations()
      some_origin_airport = df[df['ATT'] == <VALUE>]

here are more complex examples how to convert tasks to LDX, given netflix.tsv dataset, scheme ['show_id', 'type', 'title', 'director', 'cast', 'country', 'date_added', 'release_year', 'rating', 'duration', 'listed_in', 'description'] and sample:
  show_id type    title director          cast                                                                                                                                                                       country       date_added         release_year rating  duration listed_in            description
1        TV Show    3%               NaN João Miguel, Bianca Comparato, Michel Gomes, Rodolfo Valente, Vaneza Oliveira, Rafael Lozano, Viviane Porto, Mel Fronckowiak, Sergio Mamberti, Zezé Motta, Celso Frateschi        Brazil   August 14, 2020 2020          TV-MA    4                  TV Dramas              In a future where the elite inhabit an island paradise far from the crowded slums, you get one chance to join the 3% saved from squalor.
2          Movie  7:19 Jorge Michel Grau                                                                                   Demián Bichir, Héctor Bonilla, Oscar Serrano, Azalia Ortiz, Octavio Michel, Carmen Beato        Mexico December 23, 2016 2016          TV-MA   93       International Movies  After a devastating earthquake hits Mexico City, trapped survivors from all walks of life wait to be rescued while trying desperately to stay alive.
3          Movie 23:59      Gilbert Chan                                                               Tedd Chan, Stella Chung, Henley Hii, Lawrence Koh, Tommy Kuan, Josh Lai, Mark Lee, Susan Leong, Benjamin Lim     Singapore December 20, 2018 2011              R   78       International Movies When an army recruit is found dead, his fellow soldiers are forced to confront a terrifying secret that's haunting their jungle island training camp.
4          Movie     9       Shane Acker                            Elijah Wood, John C. Reilly, Jennifer Connelly, Christopher Plummer, Crispin Glover, Martin Landau, Fred Tatasciore, Alan Oppenheimer, Tom Kane United States November 16, 2017 2009          PG-13   80         Independent Movies     In a postapocalyptic world, rag-doll robots hide in fear from dangerous machines out to exterminate them, until a brave newcomer joins the group.
5          Movie    21    Robert Luketic            Jim Sturgess, Kevin Spacey, Kate Bosworth, Aaron Yoo, Liza Lapira, Jacob Pitts, Laurence Fishburne, Jack McGee, Josh Gad, Sam Golzari, Helen Carey, Jack Gilpin United States   January 1, 2020 2008          PG-13  123                     Dramas       A brilliant group of students become card-counting experts with the intent of swindling millions out of Las Vegas casinos by playing blackjack.:

task: find one rating which has one different property compared to all the other show ids

LDX:
    df = pd.read_csv("netflix.tsv", delimiter="	")

    some_rating = df[df['rating'] == <VALUE>]
    other_rating = df[df['rating'] != <VALUE>]

    some_rating_agg = some_rating.groupby(<COL>).agg(<AGG>)
    other_rating_agg = other_rating.groupby(<COL>).agg(<AGG>)

explanation: Split the tv shows to two sets - one with a certain rating and one with the other ratings.
Then apply the same aggregation on both of them in order to compare them.

task: investigate what makes shows to be directed by Christopher Nolan and drill down to a specific reason

LDX:
    df = pd.read_csv("netflix.tsv", delimiter="	")

    christopher_nolan_shows = df[df['director'] == 'Christopher Nolan']

    shows_properties1 = christopher_nolan_shows.groupby(<COL1>).agg(<AGG1>)

    focus_of_col1 = christopher_nolan_shows[christopher_nolan_shows[<COL1>] == <VALUE1>]

    shows_properties2 = focus_of_col1.groupby(<COL2>).agg(<AGG2>)

    focus_of_col2 = focus_of_col1[focus_of_col1[<COL2>] == <VALUE2>]

explanation: filter the shows to those directed by Christopher Nolan.
Then, group according to some column and apply some aggregation in order to find some column that significantly influences the distribution of those shows.
After that filter on one of the values of the selected column from the previous step. Repeat it once again to drill down more.

task: compare some three different subsets of directors according to some properties

LDX:
    df = pd.read_csv("netflix.tsv", delimiter="	")

    first_director = df[df['director'] == <VALUE1>]
    second_director = df[df['director'] == <VALUE2>]
    third_director = df[df['director'] == <VALUE3>]

    first_director_agg = first_director.groupby(<COL>).agg(<AGG>)
    second_director_agg = second_director.groupby(<COL>).agg(<AGG>)
    third_director_agg = third_director.groupby(<COL>).agg(<AGG>)

explanation: Split the shows to three sets, each one filtered to a different director.
Then apply the same aggregation on each of them in order to compare them.

task: show the average duration of some two different subsets of shows

LDX:
    df = pd.read_csv("netflix.tsv", delimiter="	")

    first_subset = df[df[<COL1>] == <VALUE1>]
    first_subset_agg = first_subset.groupby(<AGG_COL1>).agg({'duration': 'mean'})

    second_subset = df[df[<COL2] == <VALUE2>]
    second_subset_agg = second_subset.groupby(<AGG_COL2>).agg({'duration': 'mean'})

explanation: filter the shows to some column and some of its values.
Then, group the shows according to some column and calculate the average duration. Do so one more time but on different subset of the shows.

task: show two properties of the show "Hero" compared to all the shows

LDX:
    df = pd.read_csv("netflix.tsv", delimiter="	")

    shows_properties_1 = df.groupby(<COL1>).agg(<AGG1>)
    shows_properties_2 = df.groupby(<COL2>).agg(<AGG2>)

    hero_shows = df['Hero' in df['title']]
    hero_shows_properties_1 = hero_shows.groupby(<COL1>).agg(<AGG1>)
    hero_shows_properties_2 = hero_shows.groupby(<COL2>).agg(<AGG2>)

explanation: Apply two aggregations. Also filter to shows with title contains "Hero" and apply the same two aggregations in order to compare it to the previous step.

task: explore three different release years in different ways

LDX:
    df = pd.read_csv("netflix.tsv", delimiter="	")

    release_year1_shows = df[df['release_year'] == <VALUE1>]
    release_year2_shows = df[df['release_year'] == <VALUE2>]
    release_year3_shows = df[df['release_year'] == <VALUE3>]

    release_year1_shows_properties = release_year1_shows.groupby(<COL1>).agg(<AGG1>)
    release_year2_shows_properties = release_year2_shows.groupby(<COL2>).agg(<AGG2>)
    release_year3_shows_properties = release_year3_shows.groupby(<COL3>).agg(<AGG3>)

explanation: filter to three different release years and for each one show some properties.

task: explore the data, make sure to address two interesting aspects of shows with rating TV-14

LDX:
    df = pd.read_csv("netflix.tsv", delimiter="	")

    do_some_operations()

    tv_14_shows = df[df['rating'] == 'TV-14']

    tv_14_shows_properties1 = tv_14_shows.groupby(<COL1>).agg(<AGG1>)
    tv_14_shows_properties2 = tv_14_shows.groupby(<COL2>).agg(<AGG2>)

explanation: Use descendant in order to filter rating to TV-14 at some point. Then, show two different properties using two different group by operations.

task: show interesting sub-groups of shows filmed in Israel

LDX:
    df = pd.read_csv("netflix.tsv", delimiter="	")

    israel_shows = df[df['country'] == 'Israel']

    israel_shows_properties = israel_shows.groupby(<COL1>).agg(<AGG1>)
    israel_shows_sub_properties = israel_shows_properties.groupby(<COL2>).agg(<AGG2>)

explanation: Filter to shows filmed in Israel.
Then apply some groupby to view it as interesting groups, and apply another different groupby to view interesting sub-groups.

now convert the following task to LDX according to the given scheme, and add explanation.

task:
